<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2019校园招聘那些事]]></title>
    <url>%2F2018%2F11%2F29%2F2019%E6%A0%A1%E5%9B%AD%E6%8B%9B%E8%81%98%E9%82%A3%E4%BA%9B%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[想去的公司年初回学校的时候，自己去腾讯成都大厦看了看，在旁边的酒店住了一晚，是的，自己那时最想去的就是腾讯成都了，离家近，腾讯也是一家最有人文关怀的公司，去腾讯算一个小目标吧。 校招准备说来惭愧，从3月开始实习招聘到正式的校园招聘，我几乎没有像本科那样费神费力的准备过。3月底的时候自己才想起还是找个实习吧，当时已经是实习招聘的晚期，阿里也要截止了，自己也没想好投什么岗，Java、算法还是前端。Java是自己从本科开始一直在做的，不过也只是一些简单的Web项目，而且Java要准备的东西太多了，感觉时间不怎么够用。研究生期间做了一些深度学习的东西，但是都是自学水平，要顶会没顶会，要相关竞赛没相关竞赛。最后想来想去，自己平时做项目前后端都做，去年在华为实习主要做的也是React相关的前端项目，前端要准备的东西也相对没那么多，而且腾讯成都基本只有C++和前端岗，是的，你没看错，我选择了最容易的前端。看了一下《Javascript高级程序设计》，刷了一下牛客网的面经，总结总结了一下相关知识点，leetcode一题未刷，就去刚阿里了。 实习面试阿里一面简历面是支付宝的同学面试的，我当时连什么圣杯布局，双飞燕布局都不知道，不过还是给过了。至于二面正式面，面试官吃着晚饭就把我挂了，问的都是开放式的问题，比如你觉得应该怎么设计一个搜索引擎一类。阿里挂了过后，我又投了一下美团成都（前端）和网易杭州（Java），也做了一下笔试。美团笔试过了几天就收到了成都的面试邀请，一面是一个女生（楠姐）和男生（渝川）一起面我的，都是些前端的基础知识。二面是部门leader（熊哥）面的，主要问了一下我的华为实习经历和自己的鸟类识别项目怎么做的，两面时间都差不多，就40来分钟。二面过了之后自己就焦急的等待HR面，期间也不停的微信骚扰一面面试官（之后每次面试我都会主动加面试官微信），询问最新进度。可能是因为美团成都成立时间不长，HR太忙，我压根就没有HR面，只看到系统流程从安排面试辗转到面试已结束。又等了一周到4月底，我顺利收到了美团的实习offer，熊哥加了我微信，询问我什么时间能去实习，告知我希望我能做菜品识别和电话号码识别的东西，自己也挺高兴，不是去做纯前端的东西，所以也愉快的拒绝了网易的现场面试邀约。对了，还有最想去的腾讯，自己被导师的同学推到了QQ音乐团队，他们没有随大部队来西安现场面，我两面都是电话面的，基本比较顺利，无奈在第三面加面的时候，面试官匆匆问了我几个问题就把我挂了。 美团实习5月初把学校的事处理完，我就去美团实习了。美团现在在成都还是临时办公点，几个团队分散在不同的地方。我去的美团外卖在银泰旁边的菁蓉国际广场。在美团的两个多月实习时间里，现在想想，其实挺幸福的。 团队nice —— 我的导师洋哥和团队的其他小伙伴都非常有趣，周末有啥活动群里吼一声，世界杯一起看比赛吃夜宵，一起去嗨歌等等； 技术Open —— Leader熊哥很鼓励大家做一些为业务服务的技术创新，扩大自己的影响力，每两周五下午会特地拿半天时间做团队技术分享，不定时的会和成都其他团队、腾讯、阿里等公司的前端小伙伴做技术交流（上班时间允许我们去听）； 吃的好 —— 虽然临时办公点只有中午有一个师傅给大家做饭，也只有几个菜，但是超好吃好不，以至于团队的小伙伴经常嘲笑我是在西安经历了什么，晚上基本是在银泰购物中心解决的，再也没有为每天该吃什么烦恼过； 加班少 —— 除去发版的日子，团队晚上8点半基本就没啥人了。有几个有家事的小伙伴晚上基本不和大家一起吃饭，我们吃完饭回来就看到他们往回走了。关键是，熊哥不反对，下班不用看领导脸色。 离家近 —— 在美团的2个多月，我经常回家看看爷爷奶奶，时不时去亲戚那里吃个饭。 虽然有这么多好处，我最后还是没留下来，原因也很简单。 一是因为团队的业务比较边缘，技术栈是纯前端（在我看来Node不算后端，也没有当初想的图像识别的东西），当然纯前端没有什么不好，但是上限比较低（我也不是那种靠纯技术能达到上限的人）； 二是团队的小伙伴技术都很厉害，尤其是从阿里跳回来的几个，自己感觉刚开始几年还是应该去一下BAT看一下； 最重要的是，我过了腾讯的补录。 被腾讯捞了还过了面试我也挺意外。在美团实习期间，先后被三个团队捞过。第一个是腾讯云的CDN团队，一面挺顺利，然而在等二面的过程中，一面小哥很抱歉的告诉我团队只有一个补录名额，我前面那个同学过了还很优秀，就不耽误我时间了。第二个捞我的团队是天美工作室的，面试全问的是后端的，还有些深度，不出意外的挂掉了。第三个捞我的也是做云的，不过是私有云。一面leader电话面的，听见我做前端也做后台挺高兴的，他就想招全栈的。二面是在腾讯成都大厦视频面的，总监其实不怎么懂技术了，所以问的后端的东西都比较浅，我也轻松过关。选择腾讯我没有过多犹豫，拿到offer思考几天，向团队里几个小伙伴咨询意见过后就和熊哥说了。熊哥虽然有点不高兴，但还是祝我顺利，临走大家还一起吃了个饭。 腾讯实习7月12日我就踏上了去深圳的旅途。下了地铁看距离滨海大厦旁的青旅没两公里，就决定走过去，结果旅行箱的轮子坏了，提着提着手提坏了，这似乎也暗示了在腾讯实习的这段时间注定不太平。到腾讯刚10来天的一个晚上突然觉得眼睛里进了东西，但怎么照镜子都找不到，过了两天去南山医院就医，霰粒肿，立即做了个小手术。公司免费体检，肾小结石，转氨酶偏高。9月中旬那几天下班感觉眼睛很累，看屏幕会有点模糊，过了几天醒来发现眼睛肿了，又去南山医院，睑板腺阻塞，用眼过度，又做了个眼睛的小手术。在腾讯的团队和美团的也大不一样，没在美团那么的有意思，飞亚达的食堂也巨难吃。前两个月的种种都让我有点不想继续留在这里了，女票来深圳玩的时候，我们晚上去海边玩了玩，回去的时候特地去阿里深圳基地看了看，当时想着，要不还是阿里吧。在美团实习的时候，导师的同学在盒马招人，我面了面，面试官反馈技术深度不够。8月内推，我又找了一下这位师叔，他把我推到了他之前在的国际站那边。这次面试除了一面简历面都很顺利，前后一共5面的样子。简历面问了前端和网络的基础知识，在线做了几道前端，当时我是零准备，所以其实面的不是很好，但依旧给我过了，之后的四面基本都是让我讲我的四段实习经历，然后问一些开放性的问题，最后如愿拿到了offer。 错误的选择？从5月到10月一直实习奔波，在腾讯又老去医院，说实话我有些累了，迷茫了，我有点怀疑我是不是应该一直做开发了。我觉得自己要不要去试一试不用一直编程做业务的算法，但是腾讯Leader这边过不了这关，Leader想让我一直实习，而且我也不能把腾讯当做保底，毕竟这边团队一年只招一个人，培养新人也要些成本。最后我决定请个假回校冷静一段时间，顺便把快到期的驾照考了。国庆期间做完手上的活，我就回学校了。国庆前腾讯HR和我谈薪了，不算低不算高，我也如实给HR说想等一下阿里的再做权衡，回校后10月中旬也收到了阿里的谈薪电话。两边薪资加补贴其实差不多。但我犹豫了一周多，无论从哪些方面分析，我都应该去腾讯，可我最后偏偏选择了去阿里。第一次和腾讯Leader打电话的时候，我不知道怎么说，Leader告诉我做人应该坦诚，不希望我拿其他理由搪塞，当时觉得还是腾讯吧，思考了两天，最后还是给Leader说去阿里，断了自己的后路。仔细分析腾讯阿里的优缺点，做开发还是应该去腾讯。 腾讯的做的不是纯前端，只要自己愿意，前端后台云计算底层自己都可以去做，机会很多； 腾讯的产品是ToB用的，使用人数并不多，对性能要求不高，更多的是业务，比较轻松； 腾讯晋升容易，T3之前不用答辩，而且做的东西多了，不怕晋升T3没东西讲； 工作环境注重隐私些，不是开放式环境，不吵闹，中午有统一午休时间； 公司现在很重视云这块业务，几十个人的小团队做了私有云的所有，战斗力很强。 是的，不管怎么分析，我当应该去腾讯，然而现在想想当时我不去腾讯的理由，也确实有些道理。 都是业务，不管是前端后台还是底层，后台框架还是专门的技术封装好，自己写写逻辑就行，而且自己导师也建议去阿里； 自己不会在技术上有所造诣，因为没压力，自己是个懒人，即使有多余的时间也不愿意学习，典型的例子是当时有个前后端的需求，两周规划时间，我前面每天都在划水摸鱼，最后三天才做完，突然觉得自己以后会不会也是这样，完成业务就行，没有技术追求，如果跳槽没有任何技术竞争力； 还有一个原因，自己第一次和Leader通话的时候，Leader告诉我现在的工资已经倒挂4、5年的员工了，当想想简直太可怕了，这个薪资就倒挂这么多，我们部门是多没钱； 当然，最重要的，我想去试试自动驾驶相关的算法岗位，对身体而言，不用从早到晚盯着电脑，对发展而言，自动驾驶是未来，虽然这未来可能有几十年之远。 基于以上几点，我最终选择了去阿里，上面我也提到过，我是个懒人，虽然觉得去自动驾驶的公司做算法不管对身体还是发展都是大有裨益的，我也没有好好的准备，算法没看，相关的项目没复习，没有一点干劲，十足的咸鱼一只。放弃了一个轻松的有前景的腾讯，选择了一个有压力还是边缘业务的阿里，这决定是不是错误的，我也不知道，明年再来看吧~~~~]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>选择</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于TravisCI自动化部署Hexo博客到Github]]></title>
    <url>%2F2018%2F11%2F28%2F%E5%9F%BA%E4%BA%8ETravisCI%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%2F</url>
    <content type="text"><![CDATA[前言什么是Hexo，什么是TravisCI就不介绍了，不知道的自行Google。因为自己现在的笔记本快要退休了，工作公司一台电脑，自己一台，所以就想着能不能在不同电脑上都能愉快的写自己的博文。查了一圈，把Hexo放在阿里云上，每次编写好md文件再拷到服务器发布算比较好的方式了，但不是人人都是学生党能买到这么便宜的服务器，写个博客买台服务器也不划算，恰好自己最近在弄Jenkins，最后就决定采用TravisCI来自动化部署博文了。 本地环境安装（Windows）Hexo依赖Node.js，另外需用Git来进行版本控制，下载对应系统的Node.js和Git一路确定安装即可~~ Node.js Git 安装完成后，使用以下命令确认是否安装成功，成功会输出具体的软件版本12node -vgit --version 确认无误后，这里使用 Git bash 来执行之后的操作，不使用CMD的原因是我使用CMD的过程中出现了permission denied等一些估计和权限有关的错误。Git bash 是Windows下的命令行工具，如下所示 安装Hexo1npm install hexo-cli -g 完成后进入一个新目录存放博客资源，这里我放在D盘下12345cd d:hexo init blogcd blognpm installhexo server 若一切正常，你将会看到如下输出12INFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 打开浏览器输入地址http://localhost:4000/，你将会看到 ### 开始博客#### 编写博客Hexo编写博客很简单，打开一个新的git bash，切换到blog目录，使用下面的命令可以初始化一篇博客的md文件，产生的源码位置在\blog\source_posts下1hexo new post test使用编辑器打开文件，适当编辑123456---title: testdate: 2018-11-26 22:50:36tags:---### 这是测试文档刷新http://localhost:4000/页面，会发现新建的测试博客已经生效博客站点的一些基本信息，可以在根目录的_config.yaml中配置，如123title: 與誠的博客小站subtitle: To be honest ~~~language: zh-CNnote:key和value之间有空格，更多的使用方式详见Hexo的官方文档。编写博客使用的是markdown，具体的语法可以自行查询，都比较简单，简书一早也就支持了markdown语法，详细介绍见这里#### 主题定制Hexo有很多优秀的主题，可以在主题页面选择一款你钟爱的主题。这里我选择的是经典的NexT主题，因为之后的自动化部署，Hexo和主题都是即安即用的，本地的配置不再起作用，所以用自己的github账号fork一份NexT主题的代码，在这上面更新个人配置。按NexT的使用文档一步一步配置就可完成主题的定制，使用hexo server 重启，刷新页面，就可以看到主题生效了，所有配置完成后就可以推送自己的Github仓库中。具体配置可以参考我的配置文件。NexT由iissnan开发，现在已经交给组织，这里使用文档有个别有误的地方，官方使用文档最近还在更新中。### 在线部署以上都只能在本地访问我们的博客，要想在互联网上都能访问到，需要有一个博客托管的地方，这里使用免费的Github Pages来部署博客。#### SSH key 配置每次操作使用账号密码比较麻烦，这里先配置ssh密钥来免密访问Github和Coding。首先配置一下用户名和邮箱。12git config --global user.name &quot;your name&quot;git config --global user.email &quot;youremail@example.com&quot;使用命令行生成SSH key或者Git GUI工具的帮助–》show ssh key–》generate key，产生的文件具体位置在C:\Users\用户名.ssh下1ssh-keygen -t rsa按提示一路回车即可。或者 拷贝一份生成的id_rsa.pub公钥信息到github和coding账号中。 验证ssh是否生效123ssh -T git@github.comHi renyuzh! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 创建托管仓库Github中创建一个仓库名为yourname.github.io的仓库 发布配置Hexo支持 Git、Heroku、Rsync、OpenShift、FTPSync 等部署方式，这里使用Git，先安装对应的插件1npm install hexo-deployer-git --save 在博客根目录下有一个_config.yaml文件，拉到最后配置关联仓库地址1234deploy: type: git repo: git@github.com:renyuzh/renyuzh.github.io.git branch: master 保存配置后使用命令发布1234hexo generatehexo deploy或者hexo g -d 第一行命令将source目录中的markdown文件转化为html文件，第二行将内容发布到配置的仓库中。本质上pages展示的是public中的内容，所以不使用hexo deploy的方式，直接将public 中的内容push到远程仓库也是一样的效果。访问https://renyuzh.github.io，预览最新的博客 #### 自定义域名自带的二级域名稍微难看点，我们可以自己购买想要的域名，价格几元到几万不等，这里使用在阿里云上购买的域名，登录阿里云账号，进入控制台，选择左侧域名首先完善域名服务里的信息模板以便进行实名认证。然后选择自己购买的域名，点击解析，新建两个CNAME指向yourname.github.io地址，同时在Github的仓库根目录新建一个CNAME文件，内容是你的域名地址。等待10分钟后就可以使用我们购买的域名访问博客了。### TravisCITravisCI是开源的持续集成项目，和Github的整合度很高，使用持续集成开源自动化的发布构建项目。整个自动化部署的原理很简单：- 新建分支blog-source维护源码，一旦有push等更改操作时通知TravisCI拉取源码- TravisCI根据分支blog-source中.travis.yml配置信息自动构建发布博客，再把内容推送到master分支上首先使用Github账号登录TravisCI官网，同步我们的Github项目，开启pages项目要想TravisCI有操作Github的权限，必须使用Github提供的Personal access tokens，如图所示在Settings-》Developer settings下复制token信息，添加到对应的TravisCI项目中，这里只选择push时触发自动构建上面说到源码是托管在blog-source分支中的，生成的文件放在master分支中，现在任意打开一个目录，初始化git仓库，在本地新建分支，配置好.travis.yml文件即可推送到Github中123git initgit remote add origin git@github.com:renyuzh/renyuzh.github.io.gitgit checkout -b blog-source分支中，复制原blog根目录下的db.json、package.json、source目录以及.travis.yml和_config.yml配置文件，这些是必须的123456789101112131415161718192021222324252627282930language: node_jsnode_js: stable# assign build branchesbranches: only: - blog-source# cache this directorycache: directories: - node_modules #- themes 主题没有更改时可以缓存# S: Build Lifecyclebefore_install: - npm install -g hexo-cli # 安装 hexo - git clone https://github.com/renyuzh/hexo-theme-next.git themes/next # 主题没有更改时不用每次都下载安装一遍install: - npm install # 安装 package.json 中的插件script: - hexo generateafter_success: - git config --global user.name &quot;zhangrenyu&quot; - git config --global user.email &quot;zrysunshine@gmail.com&quot; - sed -i &quot;s/gh_token/$&#123;GH_TOKEN&#125;/g&quot; _config.yml #使用travisCI中配置的token替换掉_config.yml中对应的占位符 - hexo deploy# E: Build LifeCycle同时更改_config.yaml中的发布地址123deploy: type: git repo: https://gh_token@github.com/renyuzh/renyuzh.github.io.git将更改后的分支推送到远程分支123git add .git commit -m&quot;test TravisCI&quot;git push origin blog-source可以看到TravisCI自动部署成功了 参考文章1.基于 Hexo 的全自动博客构建部署系统2.Hexo遇上Travis-CI：可能是最通俗易懂的自动发布博客图文教程3.hexo搭建个人博客–NexT主题优化4.30分钟快速搭建hexo3.7.0 + next主题6.4教程(持续更新) 关于我我的博客地址：與誠的博客小站]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>效率工作</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
</search>
